!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BinaryNode	.\BinarySearchTree.cpp	/^            BinaryNode(Comparable&& e, BinaryNode* lt, BinaryNode* rt)$/;"	f	struct:BinarySearchTree::BinaryNode	access:public	signature:(Comparable&& e, BinaryNode* lt, BinaryNode* rt)
BinaryNode	.\BinarySearchTree.cpp	/^            BinaryNode(const Comparable& e, BinaryNode* lt, BinaryNode* rt)$/;"	f	struct:BinarySearchTree::BinaryNode	access:public	signature:(const Comparable& e, BinaryNode* lt, BinaryNode* rt)
BinaryNode	.\BinarySearchTree.cpp	/^        struct BinaryNode$/;"	s	class:BinarySearchTree	file:	access:private
BinarySearchTree	.\BinarySearchTree.cpp	/^        BinarySearchTree() : root{ nullptr } {}$/;"	f	class:BinarySearchTree	access:public	signature:()
BinarySearchTree	.\BinarySearchTree.cpp	/^        BinarySearchTree(BinarySearchTree&& rhs) : root{ rhs.root }$/;"	f	class:BinarySearchTree	access:public	signature:(BinarySearchTree&& rhs)
BinarySearchTree	.\BinarySearchTree.cpp	/^        BinarySearchTree(const BinarySearchTree& rhs) : root{ nullptr }$/;"	f	class:BinarySearchTree	access:public	signature:(const BinarySearchTree& rhs)
BinarySearchTree	.\BinarySearchTree.cpp	/^class BinarySearchTree$/;"	c	file:
BinarySearchTree::BinaryNode	.\BinarySearchTree.cpp	/^        struct BinaryNode$/;"	s	class:BinarySearchTree	file:	access:private
BinarySearchTree::BinaryNode::BinaryNode	.\BinarySearchTree.cpp	/^            BinaryNode(Comparable&& e, BinaryNode* lt, BinaryNode* rt)$/;"	f	struct:BinarySearchTree::BinaryNode	access:public	signature:(Comparable&& e, BinaryNode* lt, BinaryNode* rt)
BinarySearchTree::BinaryNode::BinaryNode	.\BinarySearchTree.cpp	/^            BinaryNode(const Comparable& e, BinaryNode* lt, BinaryNode* rt)$/;"	f	struct:BinarySearchTree::BinaryNode	access:public	signature:(const Comparable& e, BinaryNode* lt, BinaryNode* rt)
BinarySearchTree::BinaryNode::element	.\BinarySearchTree.cpp	/^            Comparable element;$/;"	m	struct:BinarySearchTree::BinaryNode	file:	access:public
BinarySearchTree::BinaryNode::left	.\BinarySearchTree.cpp	/^            BinaryNode* left;$/;"	m	struct:BinarySearchTree::BinaryNode	file:	access:public
BinarySearchTree::BinaryNode::right	.\BinarySearchTree.cpp	/^            BinaryNode* right;$/;"	m	struct:BinarySearchTree::BinaryNode	file:	access:public
BinarySearchTree::BinarySearchTree	.\BinarySearchTree.cpp	/^        BinarySearchTree() : root{ nullptr } {}$/;"	f	class:BinarySearchTree	access:public	signature:()
BinarySearchTree::BinarySearchTree	.\BinarySearchTree.cpp	/^        BinarySearchTree(BinarySearchTree&& rhs) : root{ rhs.root }$/;"	f	class:BinarySearchTree	access:public	signature:(BinarySearchTree&& rhs)
BinarySearchTree::BinarySearchTree	.\BinarySearchTree.cpp	/^        BinarySearchTree(const BinarySearchTree& rhs) : root{ nullptr }$/;"	f	class:BinarySearchTree	access:public	signature:(const BinarySearchTree& rhs)
BinarySearchTree::clone	.\BinarySearchTree.cpp	/^        BinaryNode* clone(BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t) const
BinarySearchTree::constains	.\BinarySearchTree.cpp	/^        bool constains(const Comparable& x) const$/;"	f	class:BinarySearchTree	access:public	signature:(const Comparable& x) const
BinarySearchTree::constains	.\BinarySearchTree.cpp	/^        bool constains(const Comparable& x, BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(const Comparable& x, BinaryNode* t) const
BinarySearchTree::findMax	.\BinarySearchTree.cpp	/^        BinaryNode* findMax(BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t) const
BinarySearchTree::findMax	.\BinarySearchTree.cpp	/^        const Comparable& findMax() const$/;"	f	class:BinarySearchTree	access:public	signature:() const
BinarySearchTree::findMin	.\BinarySearchTree.cpp	/^        BinaryNode* findMin(BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t) const
BinarySearchTree::findMin	.\BinarySearchTree.cpp	/^        const Comparable& findMin() const$/;"	f	class:BinarySearchTree	access:public	signature:() const
BinarySearchTree::insert	.\BinarySearchTree.cpp	/^        void insert(Comparable&& x)$/;"	f	class:BinarySearchTree	access:public	signature:(Comparable&& x)
BinarySearchTree::insert	.\BinarySearchTree.cpp	/^        void insert(Comparable&& x, BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(Comparable&& x, BinaryNode* &t)
BinarySearchTree::insert	.\BinarySearchTree.cpp	/^        void insert(const Comparable& x)$/;"	f	class:BinarySearchTree	access:public	signature:(const Comparable& x)
BinarySearchTree::insert	.\BinarySearchTree.cpp	/^        void insert(const Comparable& x, BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(const Comparable& x, BinaryNode* &t)
BinarySearchTree::isEmpty	.\BinarySearchTree.cpp	/^        bool isEmpty() const$/;"	f	class:BinarySearchTree	access:public	signature:() const
BinarySearchTree::makeEmpty	.\BinarySearchTree.cpp	/^        void makeEmpty()$/;"	f	class:BinarySearchTree	access:public	signature:()
BinarySearchTree::makeEmpty	.\BinarySearchTree.cpp	/^        void makeEmpty(BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* &t)
BinarySearchTree::operator =	.\BinarySearchTree.cpp	/^        BinarySearchTree& operator= (BinarySearchTree&& rhs)$/;"	f	class:BinarySearchTree	access:public	signature:(BinarySearchTree&& rhs)
BinarySearchTree::operator =	.\BinarySearchTree.cpp	/^        BinarySearchTree& operator= (const BinarySearchTree& rhs)$/;"	f	class:BinarySearchTree	access:public	signature:(const BinarySearchTree& rhs)
BinarySearchTree::printTree	.\BinarySearchTree.cpp	/^        void printTree(BinaryNode* t, ostream& out) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t, ostream& out) const
BinarySearchTree::printTree	.\BinarySearchTree.cpp	/^        void printTree(ostream& out = cout) const$/;"	f	class:BinarySearchTree	access:public	signature:(ostream& out = cout) const
BinarySearchTree::remove	.\BinarySearchTree.cpp	/^        void remove(const Comparable& x)$/;"	f	class:BinarySearchTree	access:public	signature:(const Comparable& x)
BinarySearchTree::remove	.\BinarySearchTree.cpp	/^        void remove(const Comparable& x, BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(const Comparable& x, BinaryNode* &t)
BinarySearchTree::root	.\BinarySearchTree.cpp	/^        BinaryNode* root;$/;"	m	class:BinarySearchTree	file:	access:private
BinarySearchTree::~BinarySearchTree	.\BinarySearchTree.cpp	/^        ~BinarySearchTree()$/;"	f	class:BinarySearchTree	access:public	signature:()
clone	.\BinarySearchTree.cpp	/^        BinaryNode* clone(BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t) const
constains	.\BinarySearchTree.cpp	/^        bool constains(const Comparable& x) const$/;"	f	class:BinarySearchTree	access:public	signature:(const Comparable& x) const
constains	.\BinarySearchTree.cpp	/^        bool constains(const Comparable& x, BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(const Comparable& x, BinaryNode* t) const
element	.\BinarySearchTree.cpp	/^            Comparable element;$/;"	m	struct:BinarySearchTree::BinaryNode	file:	access:public
findMax	.\BinarySearchTree.cpp	/^        BinaryNode* findMax(BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t) const
findMax	.\BinarySearchTree.cpp	/^        const Comparable& findMax() const$/;"	f	class:BinarySearchTree	access:public	signature:() const
findMin	.\BinarySearchTree.cpp	/^        BinaryNode* findMin(BinaryNode* t) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t) const
findMin	.\BinarySearchTree.cpp	/^        const Comparable& findMin() const$/;"	f	class:BinarySearchTree	access:public	signature:() const
insert	.\BinarySearchTree.cpp	/^        void insert(Comparable&& x)$/;"	f	class:BinarySearchTree	access:public	signature:(Comparable&& x)
insert	.\BinarySearchTree.cpp	/^        void insert(Comparable&& x, BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(Comparable&& x, BinaryNode* &t)
insert	.\BinarySearchTree.cpp	/^        void insert(const Comparable& x)$/;"	f	class:BinarySearchTree	access:public	signature:(const Comparable& x)
insert	.\BinarySearchTree.cpp	/^        void insert(const Comparable& x, BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(const Comparable& x, BinaryNode* &t)
isEmpty	.\BinarySearchTree.cpp	/^        bool isEmpty() const$/;"	f	class:BinarySearchTree	access:public	signature:() const
left	.\BinarySearchTree.cpp	/^            BinaryNode* left;$/;"	m	struct:BinarySearchTree::BinaryNode	file:	access:public
main	.\BinarySearchTree.cpp	/^int main()$/;"	f	signature:()
makeEmpty	.\BinarySearchTree.cpp	/^        void makeEmpty()$/;"	f	class:BinarySearchTree	access:public	signature:()
makeEmpty	.\BinarySearchTree.cpp	/^        void makeEmpty(BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* &t)
operator =	.\BinarySearchTree.cpp	/^        BinarySearchTree& operator= (BinarySearchTree&& rhs)$/;"	f	class:BinarySearchTree	access:public	signature:(BinarySearchTree&& rhs)
operator =	.\BinarySearchTree.cpp	/^        BinarySearchTree& operator= (const BinarySearchTree& rhs)$/;"	f	class:BinarySearchTree	access:public	signature:(const BinarySearchTree& rhs)
printTree	.\BinarySearchTree.cpp	/^        void printTree(BinaryNode* t, ostream& out) const$/;"	f	class:BinarySearchTree	file:	access:private	signature:(BinaryNode* t, ostream& out) const
printTree	.\BinarySearchTree.cpp	/^        void printTree(ostream& out = cout) const$/;"	f	class:BinarySearchTree	access:public	signature:(ostream& out = cout) const
remove	.\BinarySearchTree.cpp	/^        void remove(const Comparable& x)$/;"	f	class:BinarySearchTree	access:public	signature:(const Comparable& x)
remove	.\BinarySearchTree.cpp	/^        void remove(const Comparable& x, BinaryNode* &t)$/;"	f	class:BinarySearchTree	file:	access:private	signature:(const Comparable& x, BinaryNode* &t)
right	.\BinarySearchTree.cpp	/^            BinaryNode* right;$/;"	m	struct:BinarySearchTree::BinaryNode	file:	access:public
root	.\BinarySearchTree.cpp	/^        BinaryNode* root;$/;"	m	class:BinarySearchTree	file:	access:private
~BinarySearchTree	.\BinarySearchTree.cpp	/^        ~BinarySearchTree()$/;"	f	class:BinarySearchTree	access:public	signature:()
